// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  fullName         String
  email            String            @unique
  password         String
  role             UserRole          @default(USER)
  provider         String?
  providerId       String?
  verified         DateTime?
  cart             Cart?
  order            Order[]
  verificationCode VerificationCode?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id       Int    @id @default(autoincrement())
  name     String
  imageUrl String

  ingredients Ingredient[]
  items       ProductItem[]
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductItem {
  id        Int        @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?
  product   Product    @relation(fields: [productId], references: [id])
  productId Int
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Ingredient {
  id         Int       @id @default(autoincrement())
  name       String
  price      Int
  imageUrl   String
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  cartItem   CartItem? @relation(fields: [cartItemId], references: [id])
  cartItemId Int?
}

model Cart {
  id          Int        @id @default(autoincrement())
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int        @unique
  totalAmount Int        @default(0)
  token       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItem    CartItem[]
}

model CartItem {
  id            Int          @id @default(autoincrement())
  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  productItemId Int
  cart          Cart         @relation(fields: [cartId], references: [id])
  cartId        Int
  quantity      Int          @default(1)
  ingredients   Ingredient[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User?       @relation(fields: [userId], references: [id])
  userId      Int?
  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json
  fullName    String
  email       String
  phone       String
  address     String
  comment     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

model Story {
  id              Int    @id @default(autoincrement())
  previewImageUrl String

  items StoryItem[]

  createdAt DateTime @default(now())
}

model StoryItem {
  id Int @id @default(autoincrement())

  storyId Int
  story   Story @relation(fields: [storyId], references: [id])

  sourceUrl String

  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
